apply plugin: 'java'

archivesBaseName = 'scheduling' // in case current folder is not named scheduling

project.ext.set('nativeLibsDir', "$rootDir/dist/lib/")

configurations {
    nativeBundle
    restCli
    distLib {
        extendsFrom restCli
    }
}

task extractNativeBundle(type: Copy) {
    from {
        configurations.nativeBundle.collect { zipTree(it) }
    }
    into file(project.nativeLibsDir)
}

buildscript {
    repositories {
        /*if (project.hasProperty('local'))*/mavenLocal()
        mavenCentral()
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
    }

    dependencies {
        classpath "org.objectweb.proactive:programming-build-utils:${programmingVersion}"
        // needed at runtime by AntStubGenerator...
        classpath("org.objectweb.proactive:programming-core:${programmingVersion}")
        classpath 'org.hsudbrock:gradle-trang:0.1-proactive'
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
        classpath 'org.ow2.proactive:serialver-gradle:1.0-SNAPSHOT'
        classpath 'org.gradle.api.plugins:gradle-format-plugin:1.1'
    }
}

allprojects {
    apply plugin: 'maven'

    group = 'org.ow2.proactive'
    version = schedulingVersion

    if (project.hasProperty('ci')) {
        configurations.all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }

    rootProject.buildscript.repositories.each {
        repositories.add(it)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }
}

ext.javaSubprojects = subprojects.findAll { new File(it.projectDir, "src").exists() }
ext.serialver = schedulingSerialver

configure(javaSubprojects) {
    apply plugin: 'java'
    apply plugin: 'format'

    sourceCompatibility = 1.7
    compileJava.options.compilerArgs << '-Xlint:-options' // remove warning about bootstrap class path

    dependencies {
        compile 'log4j:log4j:1.2.14'
        compile 'com.google.guava:guava:18.0'
        runtime 'org.slf4j:slf4j-log4j12:1.6.6'
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
        testCompile 'org.mockito:mockito-core:1.9.5'
    }

    test {
        exclude 'functionaltests/**'
        exclude 'unittests/**'
        exclude 'unitTests/**'
    }

    task serialver(type: InsertSerialVersionUIDTask) {
        serialver = rootProject.serialver
    }

    format {
        configurationFile = file("$rootDir/eclipse_formatter_config.xml")
    }

    jar {
        manifest {
            attributes("Implementation-Title": "ProActive",
                    "Implementation-Version": version,
                    "Specification-Version": version,
                    "Implementation-Vendor": "Activeeon - OASIS - INRIA Sophia Antipolis",
                    "Implementation-URL": "http://proactive.inria.fr"
            )
        }
    }
}

def functionalTestConfiguration = {

    forkEvery 1
    include 'functionaltests/**'
    include 'unittests/**'
    include 'unitTests/**'
    systemProperties << ['url': System.getProperty("url")]
    systemProperties << ['test_slice': System.getProperty("test_slice")]
    systemProperties << ['max_test_slice': System.getProperty("max_test_slice")]
    systemProperties << ['pa.rm.home': rootDir.absolutePath]
    systemProperties << ['pa.scheduler.home': rootDir.absolutePath]
    systemProperties << ['pa.tests.consecutive': System.getProperty("os.name").toLowerCase().indexOf('win') != -1 ? 'false' : 'true']
    systemProperties << ['proactive.test.timeout': 600000]
    systemProperties << ['java.awt.headless': 'true']
    systemProperties << ['java.library.path': project.nativeLibsDir]

    testLogging {
        exceptionFormat = 'full'
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running: " + descriptor)
    }

    def clean = {
        logger.lifecycle("Killing all proactive processes")
        project.javaexec {
            main = "org.ow2.tests.ProcessCleaner"
            classpath = project.sourceSets.test.runtimeClasspath
            systemProperty "java.library.path", project.nativeLibsDir
        }
    }

    finalizedBy project.task(project.name + '-clean', { doLast clean })
    doFirst clean
}

project(':scheduler:scheduler-api') {
    dependencies {
        compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"

        compile 'it.sauronsoftware.cron4j:cron4j:2.2.5'
        compile 'isorelax:isorelax:20030108'
        compile 'commons-collections:commons-collections:3.2'
        compile 'msv:msv:20050913'

        compile project(':common-api')

        runtime 'org.codehaus.woodstox:woodstox-core-lgpl:4.1.2'
        runtime 'msv:xsdlib:20050913'
        runtime 'msv:relaxngDatatype:20030807'
        runtime 'xerces:xercesImpl:2.8.1'
    }

    apply plugin: 'trang'
    task convertSchemas
    ['3.0', '3.1', '3.2', 'dev'].each { schemaVersion ->
        task("convertSchemasXsd-$schemaVersion", type: org.hsudbrock.tranggradleplugin.TrangTask) {
            sourceDirectory = project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}")
            targetDirectory = sourceDirectory
            doLast {
                project.delete project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}/xsi.xsd")
            }
        }
        task("convertSchemasRng-$schemaVersion", type: org.hsudbrock.tranggradleplugin.TrangTask) {
            sourceDirectory = project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}")
            targetDirectory = sourceDirectory
            targetExtension = 'rng'
            doLast {
                project.delete project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}/xsi.xsd")
            }
        }
        task("convertSchemas-$schemaVersion").dependsOn << ["convertSchemasXsd-$schemaVersion", "convertSchemasRng-$schemaVersion"]
        convertSchemas.dependsOn << "convertSchemasXsd-$schemaVersion"
        convertSchemas.dependsOn << "convertSchemasRng-$schemaVersion"
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.common.Scheduler']
    }
}

project('common-api') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"
        compile "org.objectweb.proactive:programming-util:${programmingVersion}"
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scripting.ScriptResult']
    }
}


project(':scheduler:scheduler-client') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"

        compile project(':scheduler:scheduler-api')
        compile project(':common-client')
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.common.util.SchedulerProxyUserInterface']
    }
}

project('common-client') {
    dependencies {
        compile 'commons-codec:commons-codec:1.6'
        compile 'org.rrd4j:rrd4j:2.0.7'

        compile "org.objectweb.proactive:programming-core:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-annotation:${programmingVersion}"

        compile project(':common-api')
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scripting.ScriptHandler',
                   'org.ow2.proactive.jmx.provider.ro.ROServerImpl',
                   'org.ow2.proactive.jmx.provider.ro.ROConnection']
    }
}

project('rm:rm-client') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"
        compile "org.objectweb.proactive:programming-core:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-annotation:${programmingVersion}"

        compile project(':common-client')
    }
    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.utils.NodeSet',
                   'org.ow2.proactive.resourcemanager.frontend.ResourceManager',
                   'org.ow2.proactive.resourcemanager.authentication.RMAuthentication',
                   'org.ow2.proactive.resourcemanager.common.event.RMInitialState',
                   'org.ow2.proactive.resourcemanager.common.RMState',
                   'org.ow2.proactive.resourcemanager.common.util.RMProxyUserInterface',
                   'org.ow2.proactive.resourcemanager.common.util.RMListenerProxy',
                   'org.ow2.proactive.resourcemanager.frontend.topology.pinging.HostsPinger',
                   'org.ow2.proactive.resourcemanager.frontend.topology.pinging.NodesPinger',
                   'org.ow2.proactive.resourcemanager.frontend.topology.pinging.Pinger',
                   'org.ow2.proactive.resourcemanager.frontend.RMMonitoring']
    }
}

project(':rm:rm-node') {
    dependencies {
        compile 'org.ow2.proactive:process-tree-killer:1.0.0-SNAPSHOT'
        compile 'org.jvnet.winp:winp:1.23-proactive'
        compile 'net.java.dev.jna:jna:4.1.0'
        compile 'commons-io:commons-io:2.4'

        compile 'commons-cli:commons-cli:1.1'
        compile 'sigar:sigar:1.7.0-proactive'

        compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"

        compile project(':common-client')
        compile project(':rm:rm-client')
        compile "de.ruedigermoeller:fst:2.19"

        runtime fileTree(dir: project.nativeLibsDir, exclude: '*.jar')

        // protocols
        runtime "org.objectweb.proactive:programming-extension-rmissl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"

        // script engines
        runtime 'org.jruby:jruby-jline:1.7.4'
        runtime 'org.python:jython-jline:2.5.4-rc1'
        runtime 'org.codehaus.groovy:groovy-all:2.1.6'
        runtime 'jsr223:jsr223-nativeshell:0.3'
    }

}

project(':rm:rm-node-updater') {
    dependencies {
        compile 'commons-io:commons-io:2.4'

    }
    jar {
        manifest {
            attributes("Implementation-Title": "ProActive",
                    "Implementation-Version": version,
                    "Specification-Version": version,
                    "Implementation-Vendor": "Activeeon - OASIS - INRIA Sophia Antipolis",
                    "Implementation-URL": "http://proactive.inria.fr",
                    'Main-Class': 'org.ow2.proactive.resourcemanager.updater.RMNodeUpdater',
                    'Class-Path' : "scheduler-node.jar"
            )
        }
        from configurations.compile.collect { zipTree(it) }
        archiveName = 'node-updater.jar'
    }
}

project('scheduler:scheduler-server') {
    apply plugin: 'java-library-distribution'
    dependencies {
        compile 'commons-cli:commons-cli:1.1'
        compile 'commons-io:commons-io:2.4'
        compile 'javax.mail:mail:1.4.7'
        compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
        compile 'org.hibernate:hibernate-core:4.1.7.Final'
        compile 'org.eclipse.jetty:jetty-webapp:8.1.15.v20140411'


        compile "org.objectweb.proactive:programming-core:${programmingVersion}"

        compile project(':common-api')
        compile project(':common-client')
        compile project(':scheduler:scheduler-api')
        compile project(':scheduler:scheduler-client')
        compile project(':scheduler:scheduler-node')
        compile project(':rm:rm-server')
        compile project(':rm:rm-client')

        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'com.h2database:h2:1.3.167'
        testCompile 'org.codehaus.groovy:groovy-all:2.1.6'
        testCompile 'org.jvnet.winp:winp:1.23-proactive'
        testCompile files("${System.properties['java.home']}/../lib/tools.jar")

        testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
        testCompile project(':rm:rm-infrastructure:rm-infrastructure-gcm')
        testCompile project(':rm:rm-policy:rm-policy-scheduler')
        testCompile project(':scheduler:scheduler-examples')

        runtime 'org.hibernate:hibernate-c3p0:4.1.7.Final'
        runtime 'org.apache.derby:derby:10.8.2.2'
        runtime 'mysql:mysql-connector-java:5.1.16'
        runtime "org.objectweb.proactive:programming-extension-rmissl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"

        runtime project(':rest:rest-server')
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.core.SchedulerFrontend',
                   'org.ow2.proactive.scheduler.authentication.SchedulerAuthentication',
                   'org.ow2.proactive.scheduler.core.rmproxies.RMProxyActiveObject',
                   'org.ow2.proactive.scheduler.core.TerminateNotification']
    }

    artifacts {
        archives testJar
    }
}

project('scheduler:scheduler-node') {
    apply plugin: 'java-library-distribution'
    apply plugin: 'gradle-one-jar'
    dependencies {
        compile(
                "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-processbuilder:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}",

                project(':scheduler:scheduler-client'),
                project(':rm:rm-node'),
        )
        // required by ForkedJavaExecutable
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        // TODO add all protocols

        runtime fileTree(dir: project.nativeLibsDir, exclude: '*.jar')

        testCompile project(':scheduler:scheduler-examples')
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.common.TaskTerminateNotification']
    }

    task standaloneJarPrecondition {
        finalizedBy extractNativeBundle
    }

    task standaloneJar(type: OneJar, dependsOn: standaloneJarPrecondition) {
        mainClass = 'org.ow2.proactive.resourcemanager.utils.RMNodeStarter'
        binLib = fileTree(dir: project.nativeLibsDir, exclude: '*.jar')
        additionalDir = file('src/main/resources')
        manifest {
            attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
            attributes 'One-Jar-Expand': 'lib,binlib,main' // expand jars for subprocesses (forked tasks)
        }
    }
    build.dependsOn standaloneJar
    artifacts {
        archives standaloneJar
    }
}

project(':scheduler:scheduler-examples') {
    dependencies {
        compile(
                project(':scheduler:scheduler-node'),
        )
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.examples.MultiNodeExample']
    }
}

project('rm:rm-server') {
    apply plugin: 'java-library-distribution'
    dependencies {
        compile(
                'commons-cli:commons-cli:1.1',
                'it.sauronsoftware.cron4j:cron4j:2.2.5',
                'org.hibernate:hibernate-core:4.1.7.Final',
                'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',

                "org.objectweb.proactive:programming-core:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}",

                project(':common-api'),
                project(':common-client'),
                project(':rm:rm-client'),
                project(':rm:rm-node'),
        )
        testCompile project(':rm:rm-infrastructure:rm-infrastructure-gcm')
        testCompile 'org.jruby:jruby-jline:1.7.4'
        testCompile 'org.python:jython-jline:2.5.4-rc1'
        testCompile 'org.apache.sshd:sshd-core:0.12.0'

        runtime 'org.hibernate:hibernate-c3p0:4.1.7.Final'
        runtime 'org.apache.derby:derby:10.8.2.2'
        runtime 'mysql:mysql-connector-java:5.1.16'
        runtime "org.objectweb.proactive:programming-extension-rmissl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
    }


    task('functionalTest', type: Test).configure functionalTestConfiguration

    task stub(type: StubTask) {
        classes = [
                'org.ow2.proactive.resourcemanager.authentication.RMAuthenticationImpl',
                'org.ow2.proactive.resourcemanager.frontend.RMMonitoringImpl',
                'org.ow2.proactive.resourcemanager.selection.statistics.ProbablisticSelectionManager',
                'org.ow2.proactive.resourcemanager.nodesource.NodeSource',
                'org.ow2.proactive.resourcemanager.nodesource.dataspace.DataSpaceNodeConfigurationAgent',
                'org.ow2.proactive.resourcemanager.core.RMCore',
                'org.ow2.proactive.resourcemanager.nodesource.policy.NodeSourcePolicy',
                'org.ow2.proactive.resourcemanager.nodesource.RMNodeConfigurator',
                'org.ow2.proactive.resourcemanager.utils.ClientPinger',
                'org.ow2.proactive.resourcemanager.cleaning.NodesCleaner'
        ]
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        archives testJar
    }
}

project('rm:rm-infrastructure:rm-infrastructure-ec2') {
    dependencies {
        compile 'com.google.code.typica:typica:1.7.2'
        compile project(':rm:rm-server')
    }
}
project('rm:rm-infrastructure:rm-infrastructure-gcm') {
    dependencies {
        compile "org.objectweb.proactive:programming-extension-gcmdeployment:${programmingVersion}"
        compile project(':rm:rm-server')
    }
}
project('rm:rm-infrastructure:rm-infrastructure-winhpc') {
    dependencies {
        compile 'org.apache.axis2:axis2:1.4'
        compile 'org.apache.ws.commons.axiom:axiom-api:1.2.7'
        compile 'winhpc:WinHPCWebserviceStubs:1.0-proactive'
        compile project(':rm:rm-server')
    }
}

project('rm:rm-policy:rm-policy-scheduler') {
    dependencies {
        compile project(':scheduler:scheduler-client')
        compile project(':rm:rm-server')
    }
}

project(':scheduler:smartproxy') {
    dependencies {
        compile project(':scheduler:smartproxy-common')
        compile project(':scheduler:scheduler-server')

        testCompile project(':scheduler:scheduler-server').sourceSets.test.output // to get shared test classes
        testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.smartproxy.SmartProxyImpl']
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration
}

project(':scheduler:smartproxy-common') {
    dependencies {
        compile 'org.fusesource.jdbm:jdbm:2.0.1'
        compile project(':scheduler:scheduler-api')

        testCompile project(':scheduler:scheduler-server').sourceSets.test.output // to get shared test classes
        testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
    }

}

dependencies {
    distLib(project(':scheduler:scheduler-server')) {
        exclude group: 'javassist', module: 'javassist' // to avoid duplicate (artifact named differently)
    }
    distLib project('rm:rm-policy:rm-policy-scheduler')
    distLib project(':scheduler:scheduler-node')
    distLib project(':rm:rm-server')
    distLib project(':rm:rm-node-updater')
    distLib(project(':rest:rest-server')) {
        exclude group: 'javassist', module: 'javassist' // to avoid duplicate (artifact named differently)
    }
    restCli project(':rest:rest-cli')
    distLib project(':rest:rest-client')
    distLib project(':rest:rest-smartproxy')
    distLib project(':scheduler:smartproxy')

    nativeBundle 'org.jvnet.winp:winp:1.23-proactive:native'
    nativeBundle 'sigar:sigar:1.7.0-proactive:native'

    compile 'org.codehaus.groovy:groovy-all:2.1.6'
    compile 'commons-io:commons-io:2.4'
}

task dist(type: Sync) {
    from configurations.distLib
    from configurations.runtime
    from jar

    [project(':rm:rm-server'), project(':scheduler:scheduler-server')].each {
        from it.configurations.archives.artifacts.files.files
        if (it.tasks.findByName('testJar'))
            from it.testJar.outputs
    }
    into file("$rootDir/dist/lib")
}

defaultTasks 'dist'
build.dependsOn 'dist'

task scripts
dist.dependsOn scripts
dist.finalizedBy extractNativeBundle

task cleanScripts
clean.dependsOn cleanScripts

class CustomCreateStartScripts extends CreateStartScripts {
    @Override
    void generate() {
        org.gradle.api.internal.plugins.StartScriptGenerator.metaClass.'static'.getResource = {name ->
            if ("windowsStartScript.txt" == name) {
                new File(project.rootDir, "src/main/resources/org/gradle/api/internal/plugins/windowsStartScript.txt").newInputStream()
            } else if ("unixStartScript.txt" == name) {
                new File(project.rootDir, "src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt").newInputStream()
            } else {
                println "Should not be here"
            }
        }

        def generator = new org.gradle.api.internal.plugins.StartScriptGenerator()
        generator.applicationName = getApplicationName()
        generator.mainClassName = getMainClassName()
        generator.defaultJvmOpts = ["-server"]
        generator.optsEnvironmentVar = getOptsEnvironmentVar()
        generator.exitEnvironmentVar = getExitEnvironmentVar()
        generator.classpath = ["dist/lib/*", "addons", "addons/*"]
        generator.scriptRelPath = "bin/${getUnixScript().name}"
        generator.generateUnixScript(getUnixScript())
        generator.generateWindowsScript(getWindowsScript())

    }
}

def createStartScripts(className, name, String outputFolder) {
    def scriptTask = project.tasks.create(name: ('script' + name), type: CustomCreateStartScripts) {
        mainClassName className
        applicationName name
        outputDir project.file(outputFolder)
        classpath = project.configurations.distLib // will be replaced with CustomCreateStartScripts
    }
    project.scripts.dependsOn scriptTask
    project.cleanScripts.dependsOn 'cleanScript' + name
}

createStartScripts('org.ow2.proactive.scheduler.util.SchedulerStarter', 'proactive-server', 'bin')
createStartScripts('org.ow2.proactive.scheduler.util.GroovySchedulerStarter', 'proactive-server-script', 'tools')
createStartScripts('org.ow2.proactive_grid_cloud_portal.cli.CommonEntryPoint', 'proactive-client', 'bin')
createStartScripts('org.ow2.proactive.resourcemanager.utils.RMNodeStarter', 'proactive-node', 'bin')
createStartScripts('org.objectweb.proactive.extensions.vfsprovider.console.PADataserverStarter', 'proactive-dataserver', 'tools')
createStartScripts('org.objectweb.proactive.extensions.vfsprovider.gui.ServerBrowser', 'proactive-dataserver-gui', 'tools')
createStartScripts('org.ow2.proactive.authentication.crypto.CreateCredentials', 'proactive-create-cred', 'tools')
createStartScripts('org.ow2.proactive.authentication.crypto.KeyGen', 'proactive-key-gen', 'tools')
createStartScripts('org.ow2.proactive.utils.PAMRRouterStarter', 'proactive-router', 'bin')

subprojects {
    tasks.withType(Test).matching { it.name == 'functionalTest' }*.dependsOn dist
}

apply plugin: 'distribution'

distributions {
    main {
        baseName project.archivesBaseName
        contents {
            from '.'
            include "dist/**", "config/**", "bin/**", "samples/**", "addons/**", "LICENSE*", "README*", 'tools/**'
        }
    }
}

distZip.dependsOn dist

artifacts {
    archives distZip
}

// credentials are generated during release process
def createGenerateCredentialTask(String name, List<String> cliArgs) {
    project.tasks.create(name: ('generateCredentials' + name), type: JavaExec) {
        classpath = project(':common-client').sourceSets.main.runtimeClasspath
        main = 'org.ow2.proactive.authentication.crypto.CreateCredentials'
        args = cliArgs
    }
}

createGenerateCredentialTask('Rm', [ '-F', 'config/authentication/keys/pub.key',
                                     '-l', 'rm', '-p', 'rm_pwd', '-o', 'config/authentication/rm.cred'])
createGenerateCredentialTask('Scheduler', ['-F', 'config/authentication/keys/pub.key',
                                           '-l', 'scheduler', '-p', 'scheduler_pwd', '-o', 'config/authentication/scheduler.cred'])
createGenerateCredentialTask('Admin', ['-F', 'config/authentication/keys/pub.key',
                                       '-l', 'admin', '-p', 'admin', '-o', 'config/authentication/admin_user.cred'])
createGenerateCredentialTask('Node', ['-F', 'config/authentication/keys/pub.key',
                                      '-l', 'rm', '-p', 'rm_pwd', '-o', 'rm/rm-node/src/main/resources/config/authentication/rm.cred'])

task generateCredentials
generateCredentials.dependsOn generateCredentialsAdmin, generateCredentialsScheduler, generateCredentialsRm, generateCredentialsNode

def exportedProjects= [
        ":common-api",
        ":common-client",
        ":scheduler:scheduler-api",
        ":scheduler:scheduler-client",
        ":rm:rm-client",
]

task alljavadoc(type: org.gradle.api.tasks.javadoc.Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}
